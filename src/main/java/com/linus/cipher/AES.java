package com.linus.cipher;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

/**
 * Advanced Encryption Standard as specified by NIST in a draft FIPS. Based on
 * the Rijndael algorithm by Joan Daemen and Vincent Rijmen, AES is a 128-bit
 * block cipher supporting keys of 128, 192, and 256 bits.
 * 
 * It's used to replace DES.
 * 
 * @author lyan2
 *
 */
public class AES {
    private KeyGenerator keygen;

    private SecretKey seckey;
    private IvParameterSpec ivSpec;

    public static void main(String[] args) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException,
	    NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException {
	String key = "W@1sw8cUaw32!O5f";
	String iv = "aabbccddeeffgghh";

	AES aes = new AES(key, iv);
	String result = aes.encryptWidthCBC_PKCS5Padding("hello world, you are perfect, 你好，中国");
	System.out.println("AES/CBC/PKCS5Padding:" + result);

	System.out.println(aes.decryptWithCBC_PKCS5Padding(result));

	result = aes.encryptWidthCBC_ISO1026Padding("hello world, you are perfect, 你好，中国");
	System.out.println("AES/CBC/ISO10126Padding:" + result);

	System.out.println(aes.decryptWithCBC_ISO1026Padding(result));
	
	test1();
    }

    private static void test1() throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
	String key = "W@1sw8cUaw32!O5f";
	AES aes = new AES(key);

	String result = aes.encryptWithECB_ISO10126Padding("hello world, you are perfect, 你好，中国");
	System.out.println("AES/CBC/PKCS5Padding:" + result);

	System.out.println(aes.decryptWithECB_ISO10126Padding(result));
    }

    /**
     * Secret key is generated by KeyGenerator.
     * 
     * @param iv
     *            Initial vector.
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     */
    public AES() throws NoSuchAlgorithmException, NoSuchPaddingException {
	keygen = KeyGenerator.getInstance("AES");

	seckey = keygen.generateKey();
    }

    public AES(String key) {
	seckey = new SecretKeySpec(key.getBytes(), "AES");
    }

    /**
     * User provide the secret key.
     * 
     * @param key
     * @param iv
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     */
    public AES(String key, String iv) throws NoSuchAlgorithmException, NoSuchPaddingException {
	seckey = new SecretKeySpec(key.getBytes(), "AES");
	ivSpec = new IvParameterSpec(iv.getBytes());
    }
    
    /**
     * Encode with AES/ECB/PKCS5Padding.
     * @param str
     * @return
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public String encryptWithECB_PKCS5Padding(String str) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
	    IllegalBlockSizeException, BadPaddingException {
	Cipher c = Cipher.getInstance("AES/ECB/PKCS5Padding");
	c.init(Cipher.ENCRYPT_MODE, seckey);
	byte[] src = str.getBytes();
	byte[] cipher = c.doFinal(src);

	String result = Base64.encodeBase64String(cipher);
	return result;
    }
    
    /**
     * Decode with AES/ECB/PKCS5Padding.
     * @param base64Str
     * @return
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public String decryptWithECB_PKCS5Padding(String base64Str) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
	    IllegalBlockSizeException, BadPaddingException {
	Cipher c = Cipher.getInstance("AES/ECB/PKCS5Padding");
	c.init(Cipher.DECRYPT_MODE, seckey);
	byte[] cipher = Base64.decodeBase64(base64Str);
	byte[] plain = c.doFinal(cipher);

	return new String(plain);
    }

    /**
     * Encode with AES/ECB/ISO10126Padding.
     * @param str
     * @return
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public String encryptWithECB_ISO10126Padding(String str) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
	    IllegalBlockSizeException, BadPaddingException {
	Cipher c = Cipher.getInstance("AES/ECB/ISO10126Padding");
	c.init(Cipher.ENCRYPT_MODE, seckey);
	byte[] src = str.getBytes();
	byte[] cipher = c.doFinal(src);

	String result = Base64.encodeBase64String(cipher);
	return result;
    }

    /**
     * decode with AES/ECB/ISO10126Padding.
     * @param base64Str
     * @return
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public String decryptWithECB_ISO10126Padding(String base64Str) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
	    IllegalBlockSizeException, BadPaddingException {
	Cipher c = Cipher.getInstance("AES/ECB/ISO10126Padding");
	c.init(Cipher.DECRYPT_MODE, seckey);
	byte[] cipher = Base64.decodeBase64(base64Str);
	byte[] plain = c.doFinal(cipher);

	return new String(plain);
    }

    /**
     * Encrypt plain text with AES/CBC/PKCS5Padding
     * 
     * @param str
     * @return
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidAlgorithmParameterException
     */
    public String encryptWidthCBC_PKCS5Padding(String str) throws InvalidKeyException, IllegalBlockSizeException,
	    BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException {
	Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
	c.init(Cipher.ENCRYPT_MODE, seckey, ivSpec);
	byte[] src = str.getBytes();
	byte[] cipher = c.doFinal(src);

	String result = Base64.encodeBase64String(cipher);
	return result;
    }

    /**
     * Decrypt plain text with AES/CBC/PKCS5Padding.
     * 
     * @param base64Str
     *            , String encoded by base64.
     * @return plain text.
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidAlgorithmParameterException
     */
    public String decryptWithCBC_PKCS5Padding(String base64Str) throws InvalidKeyException, IllegalBlockSizeException,
	    BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException {
	byte[] cipher = Base64.decodeBase64(base64Str);

	Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
	c.init(Cipher.DECRYPT_MODE, seckey, ivSpec);
	byte[] plain = c.doFinal(cipher);

	return new String(plain);
    }

    /**
     * Encrypt plain text with AES/CBC/ISO10126Padding.
     * 
     * @param str
     * @return Cipher text encoded by base64.
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidAlgorithmParameterException
     */
    public String encryptWidthCBC_ISO1026Padding(String str) throws InvalidKeyException, IllegalBlockSizeException,
	    BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException {
	Cipher c = Cipher.getInstance("AES/CBC/ISO10126Padding");

	c.init(Cipher.ENCRYPT_MODE, seckey, ivSpec);
	byte[] src = str.getBytes();
	byte[] cipher = c.doFinal(src);

	String result = Base64.encodeBase64String(cipher);
	return result;
    }

    /**
     * Decrypt cipher text with AES/CBC/ISO10126Padding.
     * 
     * @param base64Str
     *            , cipher text encoded by base64.
     * @return Plain text.
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     * @throws NoSuchAlgorithmException
     * @throws NoSuchPaddingException
     * @throws InvalidAlgorithmParameterException
     */
    public String decryptWithCBC_ISO1026Padding(String base64Str) throws InvalidKeyException,
	    IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException,
	    InvalidAlgorithmParameterException {
	byte[] cipher = Base64.decodeBase64(base64Str);

	Cipher c = Cipher.getInstance("AES/CBC/ISO10126Padding");
	c.init(Cipher.DECRYPT_MODE, seckey, ivSpec);
	byte[] plain = c.doFinal(cipher);

	return new String(plain);
    }
}
